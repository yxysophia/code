如何判断链表相交：
两个链表的尾节点是否相同，相同则相交，否则不相交。

如何求相交点：
长的链表先走两个链表之差步，然后一起走，相同的结点就是相交点。

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA==null || headB==null)
            return null;
        
        //首先判断两个链表是否相交
        //两个链表相交只用判断尾部结点是否相同
        ListNode l1=headA;
        ListNode l2=headB;
        int count1=0; //链表1的长度
        int count2=0; //链表2的长度
        while(l1.next!=null)
        {
            l1=l1.next;
            count1++;
        }
        while(l2.next!=null)
        {
            l2=l2.next;
            count2++;
        }
        if(l1!=l2)
            return null;  //两个链表不想交
        int grap=count1-count2;
        l1=headA;
        l2=headB;
        //长的链表先走链表长度之差步
        if(grap>0)
        {
            while(grap>0)
            {
            l1=l1.next;
            grap--;
            }
        }
        else
        {
            while(grap<0)
            {
                l2=l2.next;
                grap++;
            }
        }
        while(l1!=l2)
        {
            l1=l1.next;
            l2=l2.next;
        }
        return l1;
    }
}